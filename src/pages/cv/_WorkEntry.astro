---
import type * as A from 'astro';
import type moment from 'moment';
type WorkEntry = {
	role: string;
	company: string;
	from: moment.Moment;
	to: moment.Moment | 'Present';
	description: A.MarkdownInstance<any>['Content'];
	history?: {
		from: moment.Moment;
		to: moment.Moment | 'Present';
		role: string;
	}[];
};
export interface Props {
	entry: WorkEntry;
}
const {
	role,
	company,
	from,
	to,
	history,
	description: Desc,
} = Astro.props.entry as WorkEntry;
function createWorkDuration(
	from: moment.Moment,
	to: moment.Moment | 'Present',
) {
	return to === 'Present'
		? `Since ${from.format('MMMM YYYY')}`
		: `From ${from.format('MMMM YYYY')} till ${to.format('MMMM YYYY')}`;
}
---

<section class="work-entry entry">
	<h3>{role}</h3>
	<div class="entry-info">
		<h4>{company}</h4>
		<p>{createWorkDuration(from, to)}</p>
		{
			history?.length > 0 ? (
				<>
					<span>
						<em>previously</em>
					</span>
					{history.map(e => (
						<>
							<h4>{e.role}</h4>
							<p>{createWorkDuration(e.from, e.to)}</p>
						</>
					))}
				</>
			) : (
				false
			)
		}
	</div>
	<div class="entry-desc">
		<Desc />
	</div>
</section>
